{"version":3,"sources":["music/mymusiccut.mp3","App.js","reportWebVitals.js","index.js"],"names":["sound","Howl","src","soundURL","TOUCHED","App","video","useRef","classifier","canPlaySound","mobinetModule","useState","touched","setTouched","index","setIndex","status","setStatus","init","a","console","log","setupCamera","current","knnClassifier","mobilenet","initNotifications","cooldown","Promise","resolve","reject","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","stream","srcObject","addEventListener","error","train","label","i","progress","parseInt","training","embedding","infer","addExample","sleep","run","predictClass","result","confidences","play","notify","body","ms","setTimeout","useEffect","on","className","ref","autoPlay","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6974d181.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mymusiccut.1bc029c5.mp3\";","import { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as knnClassifier from '@tensorflow-models/knn-classifier';\nimport '@tensorflow/tfjs-backend-cpu';\nimport * as tf from '@tensorflow/tfjs';\nimport { Howl } from 'howler';\nimport { initNotifications, notify } from '@mycv/f8-notification';\nimport soundURL from './music/mymusiccut.mp3';\n\nvar sound = new Howl({\n  src: [soundURL]\n});\n\nconst NOT_TOUCH = 'not_touch';\nconst TOUCHED = 'touched';\nconst TRAINING_TIMES = 50;\nconst TOUCH_CONFIDENT = 0.7;\n\n\nfunction App() {\n  const video = useRef();\n  const classifier = useRef();\n  const canPlaySound = useRef(true);\n  const mobinetModule = useRef();\n  const [touched, setTouched] = useState(false);\n  const [index, setIndex] = useState(0);\n  const [status, setStatus] = useState('');\n\n  const init = async () => {\n    console.log('init..');\n    await setupCamera();\n    console.log('success camera');\n\n    classifier.current = knnClassifier.create();\n\n    mobinetModule.current = await mobilenet.load();\n\n    console.log('Không chạm tay lên mặt và ấn Train 1');\n\n    initNotifications({ cooldown: 3000 });\n\n  }\n\n  const setupCamera = () => {\n    return new Promise((resolve, reject) => {\n      navigator.getUserMedia = navigator.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia ||\n        navigator.msGetUserMedia;\n\n      if (navigator.getUserMedia) {\n        navigator.getUserMedia(\n          { video: true },\n          stream => {\n            video.current.srcObject = stream;\n            video.current.addEventListener('loadeddata', resolve);\n          },\n          error => reject(error)\n        );\n      } else {\n        reject();\n      }\n    });\n  }\n\n  const train = async label => {\n    console.log(`${label} Đang train cho khuôn mặt của bạn...`);\n    for (let i = 0; i < TRAINING_TIMES; i++) {\n      let progress = parseInt((i + 1) / TRAINING_TIMES * 100) + \"%\";\n      console.log(\"Progress \" + progress);\n      setStatus(\"AI đang học: \" + progress);\n      if(i===49){\n        setStatus('');\n      }\n\n      await training(label);\n    }\n    setIndex(index + 1);\n  }\n\n  const training = label => {\n    return new Promise(async resolve => {\n      const embedding = mobinetModule.current.infer(\n        video.current,\n        true\n      );\n      classifier.current.addExample(embedding, label);\n      await sleep(100);\n      resolve();\n\n    })\n  }\n\n  const run = async () => {\n    const embedding = mobinetModule.current.infer(\n      video.current,\n      true\n    );\n    const result = await classifier.current.predictClass(embedding);\n    // console.log('Label: ', result.label);\n    // console.log('Confidences: ', result.confidences);\n\n    if (result.label === TOUCHED && result.confidences[result.label] > TOUCH_CONFIDENT) {\n      console.log('Touched');\n      if (canPlaySound.current) {\n        canPlaySound.current = false;\n        sound.play();\n      }\n      notify('Bỏ tay ra', { body: 'Bạn vừa chạm tay vào mặt!!' });\n      setTouched(true);\n    } else {\n      console.log('Not_touched');\n      setTouched(false);\n    }\n    setIndex(index + 1);\n    setStatus('Chương trình đã hoàn thành!!  Mời bạn đưa tay lên mặt để kiểm tra....');\n\n    await sleep(200);\n\n    run();\n  }\n\n  const sleep = ms => {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  useEffect(() => {\n    init();\n\n    sound.on('end', function () {\n      canPlaySound.current = true;\n    });\n  }, [])\n\n  return (\n    <div className={`main ${touched ? \"touched\" : \"\"}`}>\n\n      <video\n        ref={video}\n        className=\"video\"\n        autoPlay\n      />\n\n      <div className=\"control\">\n        <div className={`${index === 0 ? '' : 'button_current'}`}>\n          {status === '' ? <p>Bước 1: Quay video không chạm tay lên mặt để robot học</p> : status}\n          {status === '' ? <button className=\"btn\" onClick={() => train(NOT_TOUCH)}>Bắt đầu</button> : ''}\n        </div>\n        <div className={`${index === 1 ? '' : 'button_current'}`}>\n          {status === '' ? <p>Bước 2: Quay video đưa tay gần lên mặt để robot học</p> : status}\n          {status === '' ? <button className=\"btn\" onClick={() => train(TOUCHED)}>Tiếp tục</button> : ''}        \n        </div>\n        <div className={`${index === 2 ? '' : 'button_current'}`}>\n          <p>Bước 3: Khởi động AI</p>\n          <button className=\"btn\" onClick={() => run()}>Kiểm tra</button>\n        </div>\n        <div className={`${index === 3 ? '' : 'button_current'}`}>\n          <p>{status}</p>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}